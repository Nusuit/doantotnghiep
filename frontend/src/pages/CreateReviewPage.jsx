import React, { useState, useContext } from 'react';
import { useNavigate, Link } from 'react-router-dom';
import { createReview, checkLocationAvailability } from '../services/reviewService';
import { AuthContext } from '../context/AuthContext';

const CreateReviewPage = () => {
    const { token } = useContext(AuthContext);
    const navigate = useNavigate();

    const [formData, setFormData] = useState({
        title: '',
        content: '',
        location_name: '',
        address: ''
    });
    const [loading, setLoading] = useState(false);
    const [checkingLocation, setCheckingLocation] = useState(false);
    const [locationStatus, setLocationStatus] = useState(null);
    const [error, setError] = useState('');

    const handleChange = (e) => {
        setFormData({
            ...formData,
            [e.target.name]: e.target.value
        });

        // Reset location status khi user thay ƒë·ªïi location/address
        if (e.target.name === 'location_name' || e.target.name === 'address') {
            setLocationStatus(null);
        }
    };

    const handleLocationCheck = async () => {
        if (!formData.location_name.trim() || !formData.address.trim()) {
            setError('Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß t√™n ƒë·ªãa ƒëi·ªÉm v√† ƒë·ªãa ch·ªâ ƒë·ªÉ ki·ªÉm tra.');
            return;
        }

        setCheckingLocation(true);
        setError('');

        try {
            const response = await checkLocationAvailability(formData.location_name, formData.address);
            setLocationStatus(response.data);
        } catch (err) {
            setError('Kh√¥ng th·ªÉ ki·ªÉm tra ƒë·ªãa ƒëi·ªÉm. Vui l√≤ng th·ª≠ l·∫°i.');
            console.error('Error checking location:', err);
        } finally {
            setCheckingLocation(false);
        }
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        setLoading(true);
        setError('');

        // Validation
        if (formData.content.length < 50) {
            setError('N·ªôi dung review ph·∫£i c√≥ √≠t nh·∫•t 50 k√Ω t·ª± ƒë·ªÉ ƒë·∫£m b·∫£o ch·∫•t l∆∞·ª£ng.');
            setLoading(false);
            return;
        }

        if (formData.title.length < 10) {
            setError('Ti√™u ƒë·ªÅ ph·∫£i c√≥ √≠t nh·∫•t 10 k√Ω t·ª±.');
            setLoading(false);
            return;
        }

        try {
            const response = await createReview(formData, token);
            // Redirect to the created review
            navigate(`/reviews/${response.data.id}`);
        } catch (err) {
            if (err.response?.status === 400) {
                const detail = err.response.data.detail;
                if (detail.existing_review || detail.similar_review) {
                    const conflictReview = detail.existing_review || detail.similar_review;
                    setError(
                        <div>
                            <p className="mb-md">{detail.message}</p>
                            <div className="card" style={{ background: 'var(--bg-secondary)', marginTop: 'var(--space-md)' }}>
                                <h4 className="mb-sm">üìç {conflictReview.location_name}</h4>
                                <p className="mb-sm">üìù {conflictReview.title}</p>
                                <p className="mb-sm">üë§ T√°c gi·∫£: {conflictReview.owner}</p>
                                <Link
                                    to={`/reviews/${conflictReview.id}`}
                                    className="btn btn-accent btn-sm"
                                >
                                    Xem review n√†y
                                </Link>
                            </div>
                            {detail.suggestion && <p className="mt-md text-secondary">{detail.suggestion}</p>}
                        </div>
                    );
                } else {
                    setError(detail.message || 'C√≥ th·ªÉ ƒë·ªãa ƒëi·ªÉm n√†y ƒë√£ c√≥ review. Vui l√≤ng ki·ªÉm tra l·∫°i.');
                }
            } else if (err.response?.status === 401) {
                setError('Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.');
            } else if (err.response?.status === 422) {
                const errors = err.response.data.detail;
                if (Array.isArray(errors)) {
                    setError(errors.map(e => e.msg).join(', '));
                } else {
                    setError('D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra l·∫°i.');
                }
            } else {
                setError('T·∫°o review th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i sau.');
            }
            console.error('Error creating review:', err);
        } finally {
            setLoading(false);
        }
    };

    const canSubmit = formData.content.length >= 50 &&
        formData.title.length >= 10 &&
        formData.location_name.trim() &&
        formData.address.trim();

    return (
        <div className="page-container-sm">
            {/* Header */}
            <div className="mb-xl">
                <div className="d-flex align-center justify-between mb-lg">
                    <Link to="/reviews" className="btn btn-secondary btn-sm">
                        ‚Üê Quay l·∫°i
                    </Link>
                </div>

                <h1 className="text-center mb-md">‚úçÔ∏è Vi·∫øt Review M·ªõi</h1>
                <p className="text-center text-secondary">
                    Chia s·∫ª tr·∫£i nghi·ªám ·∫©m th·ª±c c·ªßa b·∫°n v·ªõi c·ªông ƒë·ªìng
                </p>
            </div>

            {/* Important Info Card */}
            <div className="card mb-lg" style={{ background: 'var(--bg-secondary)' }}>
                <h4 className="mb-md">‚ö†Ô∏è L∆∞u √Ω quan tr·ªçng</h4>
                <ul style={{ paddingLeft: '1.2rem', margin: 0, fontSize: '0.875rem' }}>
                    <li>M·ªói ƒë·ªãa ƒëi·ªÉm ch·ªâ c√≥ <strong>m·ªôt review ch√≠nh th·ª©c duy nh·∫•t</strong></li>
                    <li>B·∫°n s·∫Ω tr·ªü th√†nh <strong>"T√°c gi·∫£ Ch√≠nh"</strong> v√† qu·∫£n l√Ω review n√†y</li>
                    <li>C·ªông ƒë·ªìng c√≥ th·ªÉ ƒë·ªÅ xu·∫•t ch·ªânh s·ª≠a m√† b·∫°n s·∫Ω x√©t duy·ªát</li>
                    <li>Review ch·∫•t l∆∞·ª£ng cao c√≥ th·ªÉ ƒë∆∞·ª£c n√¢ng c·∫•p th√†nh <strong>Premium</strong></li>
                    <li>Th∆∞·ªüng: <strong>50 Coin</strong> khi review ƒë∆∞·ª£c duy·ªát</li>
                </ul>
            </div>

            {error && (
                <div className="card mb-lg" style={{
                    background: 'var(--error)',
                    color: 'white'
                }}>
                    {typeof error === 'string' ? <p className="mb-0">{error}</p> : error}
                </div>
            )}

            {/* Location Status */}
            {locationStatus && (
                <div className="card mb-lg" style={{
                    background: locationStatus.available ? 'var(--success)' : 'var(--warning)',
                    color: 'white'
                }}>
                    <div className="d-flex align-center gap-md">
                        <div style={{ fontSize: '2rem' }}>
                            {locationStatus.available ? '‚úÖ' : '‚ö†Ô∏è'}
                        </div>
                        <div>
                            <h4 className="mb-sm" style={{ color: 'white' }}>
                                {locationStatus.available ? 'ƒê·ªãa ƒëi·ªÉm kh·∫£ d·ª•ng!' : 'C√≥ v·∫•n ƒë·ªÅ v·ªõi ƒë·ªãa ƒëi·ªÉm'}
                            </h4>
                            <p className="mb-0" style={{ color: 'white' }}>
                                {locationStatus.message}
                            </p>
                            {!locationStatus.available && locationStatus.existing_review && (
                                <div className="mt-md">
                                    <Link
                                        to={`/reviews/${locationStatus.existing_review.id}`}
                                        className="btn btn-secondary btn-sm"
                                    >
                                        Xem review hi·ªán c√≥
                                    </Link>
                                </div>
                            )}
                        </div>
                    </div>
                </div>
            )}

            {/* Main Form */}
            <form onSubmit={handleSubmit} className="card">
                <div className="form-group">
                    <label htmlFor="location_name" className="form-label">
                        T√™n ƒë·ªãa ƒëi·ªÉm *
                    </label>
                    <input
                        type="text"
                        id="location_name"
                        name="location_name"
                        value={formData.location_name}
                        onChange={handleChange}
                        className="form-input"
                        placeholder="VD: Qu√°n B√∫n B√≤ Hu·∫ø C√¥ Ba"
                        required
                        disabled={loading}
                    />
                    <small className="form-help text-muted">
                        T√™n ch√≠nh th·ª©c c·ªßa qu√°n/ƒë·ªãa ƒëi·ªÉm
                    </small>
                </div>

                <div className="form-group">
                    <label htmlFor="address" className="form-label">
                        ƒê·ªãa ch·ªâ *
                    </label>
                    <input
                        type="text"
                        id="address"
                        name="address"
                        value={formData.address}
                        onChange={handleChange}
                        className="form-input"
                        placeholder="VD: 123 Nguy·ªÖn VƒÉn Linh, P.An Kh√°nh, Q.Ninh Ki·ªÅu, TP.C·∫ßn Th∆°"
                        required
                        disabled={loading}
                    />
                    <small className="form-help text-muted">
                        ƒê·ªãa ch·ªâ chi ti·∫øt ƒë·ªÉ m·ªçi ng∆∞·ªùi d·ªÖ t√¨m
                    </small>
                </div>

                {/* Location Check Button */}
                <div className="form-group">
                    <button
                        type="button"
                        onClick={handleLocationCheck}
                        className="btn btn-accent"
                        disabled={checkingLocation || !formData.location_name.trim() || !formData.address.trim()}
                    >
                        {checkingLocation ? (
                            <>
                                <span className="loading"></span>
                                ƒêang ki·ªÉm tra...
                            </>
                        ) : (
                            'üîç Ki·ªÉm tra ƒë·ªãa ƒëi·ªÉm'
                        )}
                    </button>
                    <small className="form-help text-muted d-block mt-xs">
                        Khuy·∫øn kh√≠ch ki·ªÉm tra tr∆∞·ªõc khi vi·∫øt ƒë·ªÉ tr√°nh tr√πng l·∫∑p
                    </small>
                </div>

                <div className="form-group">
                    <label htmlFor="title" className="form-label">
                        Ti√™u ƒë·ªÅ review *
                    </label>
                    <input
                        type="text"
                        id="title"
                        name="title"
                        value={formData.title}
                        onChange={handleChange}
                        className="form-input"
                        placeholder="VD: B√∫n b√≤ Hu·∫ø ƒë·∫≠m ƒë√†, gi√° c·∫£ h·ª£p l√Ω"
                        required
                        disabled={loading}
                    />
                    <small className="form-help text-muted">
                        T√≥m t·∫Øt ng·∫Øn g·ªçn v·ªÅ tr·∫£i nghi·ªám (t·ªëi thi·ªÉu 10 k√Ω t·ª±)
                    </small>
                </div>

                <div className="form-group">
                    <label htmlFor="content" className="form-label">
                        N·ªôi dung review *
                    </label>
                    <textarea
                        id="content"
                        name="content"
                        value={formData.content}
                        onChange={handleChange}
                        className="form-input form-textarea"
                        style={{ minHeight: '200px' }}
                        placeholder="Chia s·∫ª chi ti·∫øt v·ªÅ:
‚Ä¢ Ch·∫•t l∆∞·ª£ng m√≥n ƒÉn (v·ªã, ƒë·ªô t∆∞∆°i ngon...)
‚Ä¢ Kh√¥ng gian qu√°n (r·ªông r√£i, tho√°ng m√°t...)  
‚Ä¢ D·ªãch v·ª• (th√°i ƒë·ªô ph·ª•c v·ª•, t·ªëc ƒë·ªô...)
‚Ä¢ Gi√° c·∫£ (c√≥ h·ª£p l√Ω kh√¥ng...)
‚Ä¢ ƒêi·ªÅu ƒë·∫∑c bi·ªát (m√≥n signature, story...)
‚Ä¢ L·ªùi khuy√™n (n√™n g·ªçi m√≥n g√¨, th·ªùi gian n√†o ƒë·∫øn...)"
                        required
                        disabled={loading}
                    />
                    <div className="d-flex justify-between align-center">
                        <small className="form-help text-muted">
                            Vi·∫øt chi ti·∫øt, ch√¢n th·∫≠t ƒë·ªÉ gi√∫p c·ªông ƒë·ªìng (t·ªëi thi·ªÉu 50 k√Ω t·ª±)
                        </small>
                        <small className={`form-help ${formData.content.length >= 50 ? 'text-success' : 'text-muted'}`}>
                            {formData.content.length}/50+
                        </small>
                    </div>
                </div>

                <div className="d-flex justify-between gap-md">
                    <Link to="/reviews" className="btn btn-secondary">
                        H·ªßy
                    </Link>
                    <button
                        type="submit"
                        className="btn btn-primary btn-lg"
                        disabled={loading || !canSubmit}
                    >
                        {loading ? (
                            <>
                                <span className="loading"></span>
                                ƒêang t·∫°o review...
                            </>
                        ) : (
                            'üöÄ Xu·∫•t b·∫£n review'
                        )}
                    </button>
                </div>
            </form>

            {/* Tips Card */}
            <div className="card mt-lg" style={{ background: 'var(--bg-secondary)' }}>
                <h4 className="mb-md">üí° M·∫πo vi·∫øt review hay</h4>
                <div style={{ fontSize: '0.875rem' }}>
                    <p className="mb-sm"><strong>üéØ Kh√°ch quan & C√¢n b·∫±ng:</strong> Chia s·∫ª c·∫£ ∆∞u v√† nh∆∞·ª£c ƒëi·ªÉm</p>
                    <p className="mb-sm"><strong>üìù Chi ti·∫øt & C·ª• th·ªÉ:</strong> M√¥ t·∫£ r√µ r√†ng v·ªÅ m√≥n ƒÉn, gi√° c·∫£, d·ªãch v·ª•</p>
                    <p className="mb-sm"><strong>üì∏ H√¨nh ·∫£nh:</strong> T√≠nh nƒÉng upload ·∫£nh s·∫Øp ra m·∫Øt</p>
                    <p className="mb-0"><strong>ü§ù T√¥n tr·ªçng:</strong> D√πng ng√¥n t·ª´ l·ªãch s·ª±, tr√°nh ch√™ bai c√° nh√¢n</p>
                </div>
            </div>
        </div>
    );
};

export default CreateReviewPage; 