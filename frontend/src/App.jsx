import {
  BrowserRouter as Router,
  Routes,
  Route,
  Navigate,
} from "react-router-dom";
import { AuthProvider, useAuth } from "./hooks/useAuthNew.jsx";
import AuthPageNew from "./components/AuthPageNew";
import ProfileSetupForm from "./components/ProfileSetupForm";
import Header from "./components/Header";
import HomePage from "./pages/HomePage";
import LandingPage from "./pages/LandingPage";
import AdminLayout from "./pages/admin/AdminLayout";
import AdminDashboard from "./pages/admin/AdminDashboard";
import AdminKeywords from "./pages/admin/AdminKeywords";
import AdminConversations from "./pages/admin/AdminConversations";
import AdminKnowledge from "./pages/admin/AdminKnowledge";
import AdminReports from "./pages/admin/AdminReports";
import AdminSettings from "./pages/admin/AdminSettings";

import "./global.css";

// Ki·ªÉm tra xem user c√≥ ph·∫£i l·∫ßn ƒë·∫ßu ƒëƒÉng nh·∫≠p kh√¥ng
function isFirstTimeUser(user) {
  if (!user) return false;

  console.log("üîç Checking isFirstTimeUser for:", {
    email: user.email,
    profileComplete: user.profileComplete,
    profileCompleteType: typeof user.profileComplete,
    isProfileSetup: user.isProfileSetup,
    isProfileSetupType: typeof user.isProfileSetup,
    hasBasicInfo: {
      dateOfBirth: !!user.dateOfBirth,
      gender: !!user.gender,
      priceRange: !!user.priceRange,
    },
  });

  // If profileComplete or isProfileSetup are undefined,
  // we should wait for complete profile data before making a decision
  if (user.profileComplete === undefined && user.isProfileSetup === undefined) {
    console.log(
      "‚è≥ Profile data not loaded yet, treating as non-first-time to prevent loops"
    );
    return false;
  }

  // N·∫øu user ƒë√£ c√≥ profileComplete ho·∫∑c isProfileSetup = true, th√¨ kh√¥ng ph·∫£i first time
  // Handle both boolean and string values
  const isProfileCompleted =
    user.profileComplete === true ||
    user.profileComplete === "true" ||
    user.profileComplete === 1;
  const isSetupDone =
    user.isProfileSetup === true ||
    user.isProfileSetup === "true" ||
    user.isProfileSetup === 1;

  if (isProfileCompleted || isSetupDone) {
    console.log("‚úÖ User already completed profile");
    return false;
  }

  // Ki·ªÉm tra user c√≥ ƒë·ªß th√¥ng tin profile c∆° b·∫£n kh√¥ng
  const hasBasicProfile = user.dateOfBirth && user.gender && user.priceRange;
  if (hasBasicProfile) {
    console.log(
      "üîß User has basic profile but flags missing, considering as completed"
    );
    return false;
  }

  console.log("‚ùå User is first time");
  return true; // N·∫øu kh√¥ng c√≥ th√¥ng tin c∆° b·∫£n th√¨ l√† first time
}

// Ki·ªÉm tra admin email
function isAdminUser(email) {
  return email === "huykien283@gmail.com";
}

// Protected Route Component
function ProtectedRoute({ children, requireAdmin = false }) {
  const { isAuthenticated, user } = useAuth();

  if (!isAuthenticated) {
    return <Navigate to="/auth" replace />;
  }

  // Check admin requirement first
  if (requireAdmin && !isAdminUser(user?.email)) {
    return <Navigate to="/" replace />;
  }

  return children;
}

function AppContent() {
  const { isAuthenticated, user, refreshUserData, isInitializing } = useAuth();

  const handleProfileSetupComplete = async (profileData) => {
    console.log("Profile setup completed:", profileData);
    // Refresh user data ƒë·ªÉ c·∫≠p nh·∫≠t state v√† ch·ªù ho√†n th√†nh
    await refreshUserData();
    console.log("User data refreshed after profile setup");
  };

  // Show loading during initialization - wait for auth check to complete
  if (isInitializing) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500 mx-auto"></div>
          <p className="mt-4 text-gray-600">Loading...</p>
        </div>
      </div>
    );
  }

  // Ki·ªÉm tra n·∫øu c√≥ OAuth callback token trong URL
  const urlParams = new URLSearchParams(window.location.search);
  const hasOAuthToken =
    urlParams.get("token") || urlParams.get("code") || urlParams.get("error");

  // X√°c ƒë·ªãnh route ƒë·∫ßu ti√™n sau khi ƒëƒÉng nh·∫≠p
  const getHomeRoute = () => {
    if (!user) return "/auth";

    // N·∫øu l√† user l·∫ßn ƒë·∫ßu, chuy·ªÉn ƒë·∫øn profile setup
    if (isFirstTimeUser(user)) {
      return "/profile-setup";
    }

    // N·∫øu l√† admin, chuy·ªÉn ƒë·∫øn admin panel
    if (isAdminUser(user.email)) {
      return "/admin";
    }

    // User th√¥ng th∆∞·ªùng chuy·ªÉn ƒë·∫øn homepage
    return "/home";
  };

  return (
    <Router>
      <div className="min-h-screen bg-gray-50">
        <Header />
        <main>
          <Routes>
            {/* Authentication Route - ∆∞u ti√™n x·ª≠ l√Ω OAuth callback */}
            <Route
              path="/auth"
              element={
                !isAuthenticated || hasOAuthToken ? (
                  <AuthPageNew />
                ) : (
                  <Navigate to={getHomeRoute()} replace />
                )
              }
            />

            {/* Profile Setup Route - ch·ªâ cho user l·∫ßn ƒë·∫ßu */}
            <Route
              path="/profile-setup"
              element={
                isAuthenticated ? (
                  isFirstTimeUser(user) ? (
                    <ProfileSetupForm onComplete={handleProfileSetupComplete} />
                  ) : (
                    <Navigate to={getHomeRoute()} replace />
                  )
                ) : (
                  <Navigate to="/auth" replace />
                )
              }
            />

            {/* Homepage cho user th∆∞·ªùng */}
            <Route
              path="/home"
              element={
                <ProtectedRoute>
                  <HomePage />
                </ProtectedRoute>
              }
            />

            {/* Admin Routes - ch·ªâ cho admin email */}
            <Route
              path="/admin"
              element={
                <ProtectedRoute requireAdmin={true}>
                  <AdminLayout />
                </ProtectedRoute>
              }
            >
              <Route index element={<AdminDashboard />} />
              <Route path="keywords" element={<AdminKeywords />} />
              <Route path="conversations" element={<AdminConversations />} />
              <Route path="knowledge" element={<AdminKnowledge />} />
              <Route path="reports" element={<AdminReports />} />
              <Route path="settings" element={<AdminSettings />} />
            </Route>

            {/* Root route - ƒëi·ªÅu h∆∞·ªõng th√¥ng minh, nh∆∞ng ∆∞u ti√™n OAuth callback */}
            <Route
              path="/"
              element={
                hasOAuthToken ? (
                  <AuthPageNew />
                ) : isAuthenticated ? (
                  <Navigate to={getHomeRoute()} replace />
                ) : (
                  <LandingPage />
                )
              }
            />

            {/* Fallback cho c√°c route kh√¥ng t·ªìn t·∫°i - kh√¥ng can thi·ªáp OAuth */}
            <Route
              path="*"
              element={
                hasOAuthToken ? (
                  <AuthPageNew />
                ) : isAuthenticated ? (
                  <Navigate to={getHomeRoute()} replace />
                ) : (
                  <LandingPage />
                )
              }
            />
          </Routes>
        </main>
      </div>
    </Router>
  );
}

function App() {
  return (
    <AuthProvider>
      <AppContent />
    </AuthProvider>
  );
}

export default App;
