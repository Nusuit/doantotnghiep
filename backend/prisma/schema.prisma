// SIMPLIFIED PRISMA SCHEMA - CHỈ 2 BẢNG CHÍNH
// Loại bỏ complexity không cần thiết, tập trung vào business logic

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// BẢNG CHÍNH - User Authentication và thông tin cơ bản
model User {
  id                      Int       @id @default(autoincrement())
  email                   String    @unique @db.VarChar(255)
  passwordHash           String    @map("password_hash") @db.VarChar(255)
  
  // Account status
  accountStatus          AccountStatus @default(ACTIVE) @map("account_status")
  isEmailVerified        Boolean   @default(false) @map("is_email_verified")
  
  // Role đơn giản - không cần bảng riêng
  role                   UserRole  @default(USER)
  
  // Login info
  lastLoginAt            DateTime? @map("last_login_at")
  loginAttempts          Int       @default(0) @map("login_attempts")
  lockedUntil            DateTime? @map("locked_until")
  
  // Security tokens (chỉ khi cần)
  passwordResetToken     String?   @map("password_reset_token") @db.VarChar(255)
  passwordResetExpiresAt DateTime? @map("password_reset_expires_at")
  emailVerificationToken String?   @map("email_verification_token") @db.VarChar(255)
  
  createdAt              DateTime  @default(now()) @map("created_at")
  updatedAt              DateTime  @updatedAt @map("updated_at")
  
  // Relations
  profile                UserProfile?
  
  @@index([email], map: "idx_email")
  @@index([accountStatus], map: "idx_account_status")
  @@index([role], map: "idx_role")
  @@index([passwordResetToken], map: "idx_password_reset_token")
  @@map("users")
}

// BẢNG PROFILE - Thông tin cá nhân chi tiết
model UserProfile {
  id                     Int       @id @default(autoincrement())
  userId                 Int       @unique @map("user_id")
  
  // Display info
  displayName            String    @map("display_name") @db.VarChar(100)
  firstName              String?   @map("first_name") @db.VarChar(50)
  lastName               String?   @map("last_name") @db.VarChar(50)
  avatarUrl              String?   @map("avatar_url") @db.VarChar(500)
  
  // Personal info
  bio                    String?   @db.Text
  birthDate              DateTime? @map("birth_date") @db.Date
  gender                 Gender?
  phoneNumber            String?   @map("phone_number") @db.VarChar(20)
  
  // Address
  country                String?   @db.VarChar(100)
  city                   String?   @db.VarChar(100)
  address                String?   @db.Text
  
  // Preferences
  language               String    @default("vi") @db.VarChar(5)
  timezone               String    @default("Asia/Ho_Chi_Minh") @db.VarChar(50)
  isProfilePublic        Boolean   @default(true) @map("is_profile_public")
  
  // Notifications
  emailNotifications     Boolean   @default(true) @map("email_notifications")
  pushNotifications      Boolean   @default(true) @map("push_notifications")
  
  createdAt              DateTime  @default(now()) @map("created_at")
  updatedAt              DateTime  @updatedAt @map("updated_at")
  
  // Relations
  user                   User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([displayName], map: "idx_display_name")
  @@index([isProfilePublic], map: "idx_is_public")
  @@map("user_profiles")
}

// ENUMS - Đơn giản và rõ ràng
enum AccountStatus {
  ACTIVE    @map("active")
  INACTIVE  @map("inactive")
  SUSPENDED @map("suspended")
  
  @@map("account_status")
}

enum UserRole {
  USER      @map("user")
  ADMIN     @map("admin")
  MODERATOR @map("moderator")
  
  @@map("role")
}

enum Gender {
  MALE      @map("male")
  FEMALE    @map("female")
  OTHER     @map("other")
  
  @@map("gender")
}

